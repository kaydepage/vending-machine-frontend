#ifndef LINKEDLIST_H

#define LINKEDLIST_H
#include <algorithm>
#include <iostream>
#include <vector>
#include <iomanip>
#include "Node.h"
#include "Helper.h"

#define SAME_VALUE 0
//The value that IDs must be greater than.
#define MIN_ID_BOUND 0
//The value that IDs must be less than.
#define MAX_ID_BOUND 10000
//The char that should be at the beginning of every ID string.
#define ID_LETTER 'I'
//The length that the number section of the ID string should be.
#define ID_SIZE 4
//Max int value of ID nums.
#define MAX_ID_NUM 9999
//Index of first number in ID string.
#define FIRST_NUM_INDEX 1

#define EMPTY_STRING ""
//The char that should be in every price string.
#define DECIMAL_CHAR '.'
//The char representing a 0, being one of 2 values the second cents index should be.
#define ZERO_CHAR '0'
//The char representing a 0, being one of 2 values the second cents index should be.
#define FIVE_CHAR '5'
#define COMMA_CHAR ','
#define PIPE_CHAR '|'

//The size the vector with the stock details should be.
#define LIST_SIZE 5
//0 nodes in the linkedlist.
#define NO_NODES 0

//the size the vector with the coin details should be.
#define COIN_SIZE 8

//Max size of dollar and cents substrings in price string.
#define DOLLAR_MAX_SIZE 2
#define CENTS_MAX_SIZE 2

//Correct number of params for a stock line in data file.
#define STOCK_PARAMS 5
//Correct number of params for a coin line in data file.
#define COIN_PARAMS 2 

//Index of stock file in arguements when running the program.
#define STOCK_FILE_INDEX 1
//Index of coin file in arguements when running the program.
#define COIN_FILE_INDEX 2

//Index of denomination inside coin vector.
#define DENOM_INDEX 0
//Indexx of count inside coin vector.
#define COUNT_INDEX 1

//Correct number of arguements needed to run the program. i.e ./ppd stock.dat coins.dat
#define CORRECT_ARG_COUNT 3

class LinkedList
{
public:
    LinkedList();
    ~LinkedList();

    //returns the linkedlist's count value.
    int getCount();

    Node* getHead();

    //Adds a node to an empty linkedlist. Sets the head value of linkedlist to node input.
    void addHead(Node* node);

    //Attemps to insert a node into a non empty linkedlist.
    //Fails if node ID or node name are already in the linkedlist.
    bool addNode(Node* node);

    //Asks for user input to generate a new node for the linkedlist. The ID is generated by getNewID().
    //Name and description are validated as non empty strings, with price input being validated for 
    //being correct size, containing a decimal as well as the remaining characters being valid integers.
    //If the input is validated, a new node is dynamically created which is then attempted to be added to the 
    //linkedlist through addNode. If addNode returns false, the newly created node is deleted.
    bool addStock(std::string newID);
    
    //traverses the linkedlist starting from head and ouputs the values of each node to the terminal.
    void displayStock();

    //Generates the next available ID to be used for node insertion.
    //First scrapes all ids in use in the linkedlist and adds their int components to a vector.
    //Then starting from 1, checks if that int is not in the vector.
    //If the int is not in the vector, it is set as the next ID.
    std::string getNewID();

    //traverses the linkedlist beginning from the head and compares each node to the id parameter.
    //If the current node's id matches the input, that node is returned.
    Node* getById(std::string id);

    //travers the linkedlist and changes each node's count value to the input value.
    void resetStockCount(int inputCount);

    //traverses the linkedlist beginning with the head. Sets the next node to head and deletes the prior head.
    void deleteListNodes();

    //Asks user which id they would like to delete. If the input is a id of a node in the linkedlist
    //that node is deleted and the prior node's next value is set to the deleted nodes next. 
    void deleteNodebyID();

    std::vector<std::vector<std::string>> getListOutput();
    

private:
    // the beginning of the list
    Node* head;
  
    // how many nodes are there in the list?
    unsigned count;
};



#endif  // LINKEDLIST_H


